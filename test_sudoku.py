import full_sudoku as sudoku
import puzzles as puzzles


def test_columns():
    "Tests that the create_column function works as intended"
    columns = []
    assert sudoku.create_columns([[5,3,0,0,7,0,0,0,0],
                    [6,0,0,1,9,5,0,0,0],
                    [0,9,8,0,0,0,0,6,0],
                    [8,0,0,0,6,0,0,0,3],
                    [4,0,0,8,0,3,0,0,1],
                    [7,0,0,0,2,0,0,0,6],
                    [0,6,0,0,0,0,2,8,0],
                    [0,0,0,4,1,9,0,0,5],
                    [0,0,0,0,8,0,0,7,9]]) == [[5, 6, 0, 8, 4, 7, 0, 0, 0], [3, 0, 9, 0, 0, 0, 6, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 8, 0, 0, 4, 0], [7, 9, 0, 6, 0, 2, 0, 1, 8], [0, 5, 0, 0, 3, 0, 0, 9, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 6, 0, 0, 0, 8, 0, 7], [0, 0, 0, 3, 1, 6, 0, 5, 9]]


def test_boxes():
    "Tests create_boxes"
    boxes = [[],[],[],[],[],[],[],[],[]]
    assert sudoku.create_boxes([[0,0,8,0,0,0,4,0,6],
          [0,0,7,0,0,8,0,0,0],
          [0,0,0,9,0,1,8,0,0],
          [2,0,1,0,9,0,3,7,0],
          [0,0,9,2,0,4,6,0,0],
          [0,3,5,0,1,0,2,0,9],
          [0,0,6,1,0,9,0,0,0],
          [0,0,0,4,0,0,7,0,0],
          [5,0,2,0,0,0,1,0,0]]) == [[0,0,8,0,0,7,0,0,0],[0,0,0,0,0,8,9,0,1],[4,0,6,0,0,0,8,0,0],
                                    [2,0,1,0,0,9,0,3,5],[0,9,0,2,0,4,0,1,0],[3,7,0,6,0,0,2,0,9],
                                    [0,0,6,0,0,0,5,0,2],[1,0,9,4,0,0,0,0,0],[0,0,0,7,0,0,1,0,0]]

def test_clear_boxes():
    "Makes sure that the clearing function performs as expected"
    assert sudoku.box_cleaner([[0,0,8,0,0,7,0,0,0],[0,0,0,0,0,8,9,0,1],[4,0,6,0,0,0,8,0,0],
                                    [2,0,1,0,0,9,0,3,5],[0,9,0,2,0,4,0,1,0],[3,7,0,6,0,0,2,0,9],
                                    [0,0,6,0,0,0,5,0,2],[1,0,9,4,0,0,0,0,0],[0,0,0,7,0,0,1,0,0]]) == [[],[],[],[],[],[],[],[],[]]

def test_identify_box():
    "Tests the identify box function"
    assert sudoku.identify_box(4,0) == 3
    assert sudoku.identify_box(0,4) == 1

def test_solver():
    "Tests the solver group of functions"
    columns = []
    boxes = [[],[],[],[],[],[],[],[],[]]
    possible_numbers = [1,2,3,4,5,6,7,8,9]
    change_list = []
    assert sudoku.sudoku_king([[5,3,0,0,7,0,0,0,0],
                    [6,0,0,1,9,5,0,0,0],
                    [0,9,8,0,0,0,0,6,0],
                    [8,0,0,0,6,0,0,0,3],
                    [4,0,0,8,0,3,0,0,1],
                    [7,0,0,0,2,0,0,0,6],
                    [0,6,0,0,0,0,2,8,0],
                    [0,0,0,4,1,9,0,0,5],
                    [0,0,0,0,8,0,0,7,9]]) == [[5,3,4,6,7,8,9,1,2],
                 [6,7,2,1,9,5,3,4,8],
                 [1,9,8,3,4,2,5,6,7],
                 [8,5,9,7,6,1,4,2,3],
                 [4,2,6,8,5,3,7,9,1],
                 [7,1,3,9,2,4,8,5,6],
                 [9,6,1,5,3,7,2,8,4],
                 [2,8,7,4,1,9,6,3,5],
                 [3,4,5,2,8,6,1,7,9]]

def test_hinter():
    "Tests the hint provider"
    columns = []
    boxes = [[],[],[],[],[],[],[],[],[]]
    possible_numbers = [1,2,3,4,5,6,7,8,9]
    change_list = []
    assert sudoku.sudoku_hint([[5,3,0,0,7,0,0,0,0],
                    [6,0,0,1,9,5,0,0,0],
                    [0,9,8,0,0,0,0,6,0],
                    [8,0,0,0,6,0,0,0,3],
                    [4,0,0,8,0,3,0,0,1],
                    [7,0,0,0,2,0,0,0,6],
                    [0,6,0,0,0,0,2,8,0],
                    [0,0,0,4,1,9,0,0,5],
                    [0,0,0,0,8,0,0,7,9]]) == [[5,3,4,0,7,0,0,0,0],
                    [6,0,0,1,9,5,0,0,0],
                    [0,9,8,0,0,0,0,6,0],
                    [8,0,0,0,6,0,0,0,3],
                    [4,0,0,8,0,3,0,0,1],
                    [7,0,0,0,2,0,0,0,6],
                    [0,6,0,0,0,0,2,8,0],
                    [0,0,0,4,1,9,0,0,5],
                    [0,0,0,0,8,0,0,7,9]]

def test_hint_extreme():
    "Test hint provider with extreme cases"
    columns = []
    boxes = [[],[],[],[],[],[],[],[],[]]
    possible_numbers = [1,2,3,4,5,6,7,8,9]
    change_list = []
    assert sudoku.sudoku_hint([[5,3,4,6,7,8,9,1,2],
                 [6,7,2,1,9,5,3,4,8],
                 [1,9,8,3,4,2,5,6,7],
                 [8,5,9,7,6,1,4,2,3],
                 [4,2,6,8,5,3,7,9,1],
                 [7,1,3,9,2,4,8,5,6],
                 [9,6,1,5,3,7,2,8,4],
                 [2,8,7,4,1,9,6,3,5],
                 [3,4,5,2,8,6,1,7,9]]) == [[5,3,4,6,7,8,9,1,2],
                 [6,7,2,1,9,5,3,4,8],
                 [1,9,8,3,4,2,5,6,7],
                 [8,5,9,7,6,1,4,2,3],
                 [4,2,6,8,5,3,7,9,1],
                 [7,1,3,9,2,4,8,5,6],
                 [9,6,1,5,3,7,2,8,4],
                 [2,8,7,4,1,9,6,3,5],
                 [3,4,5,2,8,6,1,7,9]]

def test_filter():
    assert sudoku.sudoku_filter([[5,3,3,0,7,0,0,0,0],
                    [6,0,0,1,9,5,0,0,0],
                    [0,9,8,0,0,0,0,6,0],
                    [8,0,0,0,6,0,0,0,3],
                    [4,0,0,8,0,3,0,0,1],
                    [7,0,0,0,2,0,0,0,6],
                    [0,6,0,0,0,0,2,8,0],
                    [0,0,0,4,1,9,0,0,5],
                    [0,0,0,0,8,0,0,7,9]]) == False

def test_filter_2():
    assert sudoku.sudoku_filter([[5,3,0,0,7,0,0,0,0],
                    [6,0,0,1,9,5,0,0,0],
                    [0,9,8,0,0,0,0,6,0],
                    [8,0,0,0,6,0,0,0,3],
                    [4,0,0,8,0,3,0,0,1],
                    [7,0,0,0,2,0,0,0,6],
                    [0,6,0,0,0,0,2,8,0],
                    [0,0,0,4,1,9,0,0,5],
                    [0,0,0,0,8,0,0,7,9]]) == True

def test_filter_3():
    assert sudoku.sudoku_filter([[0,0,0,0,0,0,4,0,0],
                                 [0,0,0,0,0,0,4,0,0],
                                 [0,0,0,0,0,0,4,0,0],
                                 [0,0,0,0,0,0,4,0,0],
                                 [0,0,0,0,0,0,4,0,0],
                                 [0,0,0,0,0,0,4,0,0],
                                 [0,0,0,0,0,0,4,0,0],
                                 [0,0,0,0,0,0,4,0,0],
                                 [0,0,0,0,0,0,3,0,0],]) == False

def test_filter_4():
    assert sudoku.sudoku_filter([[0,0,0,0,0,0,4,0,0],
                                 [0,0,0,0,0,0,0,4,0],
                                 [0,0,0,0,0,0,0,0,0],
                                 [0,0,0,0,0,0,1,0,0],
                                 [0,0,0,0,0,0,3,0,0],
                                 [0,0,0,0,0,0,0,0,0],
                                 [0,0,0,0,0,0,0,0,0],
                                 [0,0,0,0,0,0,8,0,0],
                                 [0,0,0,0,0,0,0,0,0]]) == False

def test_bad_solver():
    assert sudoku.sudoku_king([[5,3,5,0,7,0,0,0,0],
                    [6,0,0,1,9,5,0,0,0],
                    [0,9,8,0,0,0,0,6,0],
                    [8,0,0,0,6,0,0,0,3],
                    [4,0,0,8,0,3,0,0,1],
                    [7,0,0,0,2,0,0,0,6],
                    [0,6,0,0,0,0,2,8,0],
                    [0,0,0,4,1,9,0,0,5],
                    [0,0,0,0,8,0,0,7,9]]) == False

def test_failure_hinter():
    assert sudoku.sudoku_hint([[5,3,5,0,7,0,0,0,0],
                    [6,0,0,1,9,5,0,0,0],
                    [0,9,8,0,0,0,0,6,0],
                    [8,0,0,0,6,0,0,0,3],
                    [4,0,0,8,0,3,0,0,1],
                    [7,0,0,0,2,0,0,0,6],
                    [0,6,0,0,0,0,2,8,0],
                    [0,0,0,4,1,9,0,0,5],
                    [0,0,0,0,8,0,0,7,9]]) == "Unsolvable Puzzle"

def test_unsolvable():
    assert sudoku.sudoku_king([[5,1,6,8,4,9,7,3,2],
                    [3,0,7,6,0,5,0,0,0],
                    [8,0,9,7,0,0,0,6,5],
                    [1,3,5,0,6,0,9,0,7],
                    [4,7,2,5,9,1,0,0,6],
                    [9,6,8,3,7,0,0,5,0],
                    [2,5,3,1,8,6,0,7,4],
                    [6,8,4,2,0,7,5,0,0],
                    [7,9,1,0,5,0,6,0,8]]) == False

def test_new_columns():
    assert sudoku.generate_columns(puzzles.test_solution) == puzzles.test_solution_columns

def test_better_boxes():
    pass